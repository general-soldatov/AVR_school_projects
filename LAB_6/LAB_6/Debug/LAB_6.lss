
LAB_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ed  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	2b c0       	rjmp	.+86     	; 0x7e <digit_out+0x32>
  28:	2c c0       	rjmp	.+88     	; 0x82 <digit_out+0x36>
  2a:	18 c0       	rjmp	.+48     	; 0x5c <digit_out+0x10>
  2c:	19 c0       	rjmp	.+50     	; 0x60 <digit_out+0x14>
  2e:	1a c0       	rjmp	.+52     	; 0x64 <digit_out+0x18>
  30:	1b c0       	rjmp	.+54     	; 0x68 <digit_out+0x1c>
  32:	1c c0       	rjmp	.+56     	; 0x6c <digit_out+0x20>
  34:	1d c0       	rjmp	.+58     	; 0x70 <digit_out+0x24>
  36:	1e c0       	rjmp	.+60     	; 0x74 <digit_out+0x28>
  38:	1f c0       	rjmp	.+62     	; 0x78 <digit_out+0x2c>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61
  46:	1f d0       	rcall	.+62     	; 0x86 <main>
  48:	47 c0       	rjmp	.+142    	; 0xd8 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <digit_out>:
#define DIGIT 10

char digit_out(unsigned char digit)
{
	
	switch(digit)
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	8a 30       	cpi	r24, 0x0A	; 10
  50:	91 05       	cpc	r25, r1
  52:	a0 f4       	brcc	.+40     	; 0x7c <digit_out+0x30>
  54:	fc 01       	movw	r30, r24
  56:	ed 5e       	subi	r30, 0xED	; 237
  58:	ff 4f       	sbci	r31, 0xFF	; 255
  5a:	09 94       	ijmp
	{
		case 0: return ZERO;
		case 1: return ONE;
		case 2: return TWO;
  5c:	8b e5       	ldi	r24, 0x5B	; 91
  5e:	08 95       	ret
		case 3: return THREE;
  60:	8f e4       	ldi	r24, 0x4F	; 79
  62:	08 95       	ret
		case 4: return FOUR;
  64:	86 e6       	ldi	r24, 0x66	; 102
  66:	08 95       	ret
		case 5: return FIVE;
  68:	8d e6       	ldi	r24, 0x6D	; 109
  6a:	08 95       	ret
		case 6: return SIX;
  6c:	8d e7       	ldi	r24, 0x7D	; 125
  6e:	08 95       	ret
		case 7: return SEVEN;
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	08 95       	ret
		case 8: return EIGHT;
  74:	8f e7       	ldi	r24, 0x7F	; 127
  76:	08 95       	ret
		case 9: return NINE;
  78:	8f e6       	ldi	r24, 0x6F	; 111
  7a:	08 95       	ret
		
	}
}
  7c:	08 95       	ret
char digit_out(unsigned char digit)
{
	
	switch(digit)
	{
		case 0: return ZERO;
  7e:	8f e3       	ldi	r24, 0x3F	; 63
  80:	08 95       	ret
		case 1: return ONE;
  82:	86 e0       	ldi	r24, 0x06	; 6
		case 7: return SEVEN;
		case 8: return EIGHT;
		case 9: return NINE;
		
	}
}
  84:	08 95       	ret

00000086 <main>:


int main(void)
{
    unsigned char i, butcount = 0, butstate = 1;
	DDRB = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
  8a:	11 ba       	out	0x11, r1	; 17
	PORTD = (1 << 0);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	82 bb       	out	0x12, r24	; 18
}


int main(void)
{
    unsigned char i, butcount = 0, butstate = 1;
  90:	c0 e0       	ldi	r28, 0x00	; 0
	DDRB = 0xFF;
	DDRD = 0x00;
	PORTD = (1 << 0);
    while (1) 
    {
		for (i = 0; i < DIGIT; i++)
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	1e c0       	rjmp	.+60     	; 0xd2 <main+0x4c>
		{
			while (butstate == 0)
			{
				if (!(PIND&(1 << 0)))
  96:	80 99       	sbic	0x10, 0	; 16
  98:	04 c0       	rjmp	.+8      	; 0xa2 <main+0x1c>
				{
					if (butcount < 5)
  9a:	c5 30       	cpi	r28, 0x05	; 5
  9c:	30 f4       	brcc	.+12     	; 0xaa <main+0x24>
					{
						butcount++;
  9e:	cf 5f       	subi	r28, 0xFF	; 255
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x2c>
						butstate = 1;
					}
				}
				else
				{
					if (butcount > 0)
  a2:	cc 23       	and	r28, r28
  a4:	29 f0       	breq	.+10     	; 0xb0 <main+0x2a>
					{
						butcount--;
  a6:	c1 50       	subi	r28, 0x01	; 1
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <main+0x2c>
						butcount++;
					}
					else
					{
						i = 0;
						butstate = 1;
  aa:	81 e0       	ldi	r24, 0x01	; 1
					{
						butcount++;
					}
					else
					{
						i = 0;
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x2c>
					{
						butcount--;
					}
					else
					{
						butstate = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
	PORTD = (1 << 0);
    while (1) 
    {
		for (i = 0; i < DIGIT; i++)
		{
			while (butstate == 0)
  b2:	88 23       	and	r24, r24
  b4:	81 f3       	breq	.-32     	; 0x96 <main+0x10>
					{
						butstate = 1;
					}
				}
			}
			PORTB = digit_out(i);
  b6:	8d 2f       	mov	r24, r29
  b8:	c9 df       	rcall	.-110    	; 0x4c <digit_out>
  ba:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x3c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x46>
  cc:	00 00       	nop
	DDRB = 0xFF;
	DDRD = 0x00;
	PORTD = (1 << 0);
    while (1) 
    {
		for (i = 0; i < DIGIT; i++)
  ce:	df 5f       	subi	r29, 0xFF	; 255
					}
				}
			}
			PORTB = digit_out(i);
			_delay_ms(1000);
			butstate = 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
	DDRB = 0xFF;
	DDRD = 0x00;
	PORTD = (1 << 0);
    while (1) 
    {
		for (i = 0; i < DIGIT; i++)
  d2:	da 30       	cpi	r29, 0x0A	; 10
  d4:	70 f3       	brcs	.-36     	; 0xb2 <main+0x2c>
  d6:	dd cf       	rjmp	.-70     	; 0x92 <main+0xc>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
