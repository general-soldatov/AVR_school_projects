
LAB_7_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d8  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b2  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024f  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	86 c0       	rjmp	.+268    	; 0x11a <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	33 c0       	rjmp	.+102    	; 0x8e <digit_out+0x32>
  28:	34 c0       	rjmp	.+104    	; 0x92 <digit_out+0x36>
  2a:	20 c0       	rjmp	.+64     	; 0x6c <digit_out+0x10>
  2c:	21 c0       	rjmp	.+66     	; 0x70 <digit_out+0x14>
  2e:	22 c0       	rjmp	.+68     	; 0x74 <digit_out+0x18>
  30:	23 c0       	rjmp	.+70     	; 0x78 <digit_out+0x1c>
  32:	24 c0       	rjmp	.+72     	; 0x7c <digit_out+0x20>
  34:	25 c0       	rjmp	.+74     	; 0x80 <digit_out+0x24>
  36:	26 c0       	rjmp	.+76     	; 0x84 <digit_out+0x28>
  38:	27 c0       	rjmp	.+78     	; 0x88 <digit_out+0x2c>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a6 36       	cpi	r26, 0x66	; 102
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	a6 d0       	rcall	.+332    	; 0x1a4 <main>
  58:	c9 c0       	rjmp	.+402    	; 0x1ec <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <digit_out>:
#define NINE (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << F)|(1 << G)

char digit_out(unsigned char digit)
{
	
	switch(digit)
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	91 05       	cpc	r25, r1
  62:	a0 f4       	brcc	.+40     	; 0x8c <digit_out+0x30>
  64:	fc 01       	movw	r30, r24
  66:	ed 5e       	subi	r30, 0xED	; 237
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	09 94       	ijmp
	{
		case 0: return ZERO;
		case 1: return ONE;
		case 2: return TWO;
  6c:	8b e5       	ldi	r24, 0x5B	; 91
  6e:	08 95       	ret
		case 3: return THREE;
  70:	8f e4       	ldi	r24, 0x4F	; 79
  72:	08 95       	ret
		case 4: return FOUR;
  74:	86 e6       	ldi	r24, 0x66	; 102
  76:	08 95       	ret
		case 5: return FIVE;
  78:	8d e6       	ldi	r24, 0x6D	; 109
  7a:	08 95       	ret
		case 6: return SIX;
  7c:	8d e7       	ldi	r24, 0x7D	; 125
  7e:	08 95       	ret
		case 7: return SEVEN;
  80:	87 e0       	ldi	r24, 0x07	; 7
  82:	08 95       	ret
		case 8: return EIGHT;
  84:	8f e7       	ldi	r24, 0x7F	; 127
  86:	08 95       	ret
		case 9: return NINE;
  88:	8f e6       	ldi	r24, 0x6F	; 111
  8a:	08 95       	ret
		
	}
}
  8c:	08 95       	ret
char digit_out(unsigned char digit)
{
	
	switch(digit)
	{
		case 0: return ZERO;
  8e:	8f e3       	ldi	r24, 0x3F	; 63
  90:	08 95       	ret
		case 1: return ONE;
  92:	86 e0       	ldi	r24, 0x06	; 6
		case 7: return SEVEN;
		case 8: return EIGHT;
		case 9: return NINE;
		
	}
}
  94:	08 95       	ret

00000096 <button>:
unsigned char i, butcount = 0, butstate = 0;
unsigned char R1 = 0, R2 = 0;

void button(void)
{
	while (butstate == 0)
  96:	1b c0       	rjmp	.+54     	; 0xce <button+0x38>
	{
		if (!(PIND&(1 << 3)))
  98:	83 99       	sbic	0x10, 3	; 16
  9a:	0e c0       	rjmp	.+28     	; 0xb8 <button+0x22>
		{
			if (butcount < 5)
  9c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <butcount>
  a0:	85 30       	cpi	r24, 0x05	; 5
  a2:	20 f4       	brcc	.+8      	; 0xac <button+0x16>
			{
				butcount++;
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <butcount>
  aa:	11 c0       	rjmp	.+34     	; 0xce <button+0x38>
			}
			else
			{
				i = 0;
  ac:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i>
				butstate = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <butstate>
  b6:	0b c0       	rjmp	.+22     	; 0xce <button+0x38>
			}
		}
		else
		{
			if (butcount > 0)
  b8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <butcount>
  bc:	88 23       	and	r24, r24
  be:	21 f0       	breq	.+8      	; 0xc8 <button+0x32>
			{
				butcount--;
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <butcount>
  c6:	03 c0       	rjmp	.+6      	; 0xce <button+0x38>
			}
			else
			{
				butstate = 1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <butstate>
unsigned char i, butcount = 0, butstate = 0;
unsigned char R1 = 0, R2 = 0;

void button(void)
{
	while (butstate == 0)
  ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <butstate>
  d2:	88 23       	and	r24, r24
  d4:	09 f3       	breq	.-62     	; 0x98 <button+0x2>
			{
				butstate = 1;
			}
		}
	}
}
  d6:	08 95       	ret

000000d8 <ledout>:

void ledout(unsigned char number)
{
	R1 = number % 10;
  d8:	9d ec       	ldi	r25, 0xCD	; 205
  da:	89 9f       	mul	r24, r25
  dc:	91 2d       	mov	r25, r1
  de:	11 24       	eor	r1, r1
  e0:	96 95       	lsr	r25
  e2:	96 95       	lsr	r25
  e4:	96 95       	lsr	r25
  e6:	39 2f       	mov	r19, r25
  e8:	33 0f       	add	r19, r19
  ea:	23 2f       	mov	r18, r19
  ec:	22 0f       	add	r18, r18
  ee:	22 0f       	add	r18, r18
  f0:	23 0f       	add	r18, r19
  f2:	82 1b       	sub	r24, r18
  f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <R1>
	R2 = number / 10;	
  f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <R2>
  fc:	08 95       	ret

000000fe <timer_ini>:
}

void timer_ini(void)
{
	TCCR1B |= (1 << WGM12);
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 104:	89 b7       	in	r24, 0x39	; 57
 106:	80 61       	ori	r24, 0x10	; 16
 108:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00001111;
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = (1 << 1)|(1 << 6);
 10e:	82 e4       	ldi	r24, 0x42	; 66
 110:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS10);
 112:	8e b5       	in	r24, 0x2e	; 46
 114:	81 60       	ori	r24, 0x01	; 1
 116:	8e bd       	out	0x2e, r24	; 46
 118:	08 95       	ret

0000011a <__vector_6>:
}

unsigned char n_count = 0;

ISR (TIMER1_COMPA_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	if (n_count == 0) 
 13c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 140:	81 11       	cpse	r24, r1
 142:	0a c0       	rjmp	.+20     	; 0x158 <__vector_6+0x3e>
	{
		PORTD &= ~(1 << 0);
 144:	82 b3       	in	r24, 0x12	; 18
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << 1);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	82 bb       	out	0x12, r24	; 18
		PORTB = digit_out(R2);
 150:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <R2>
 154:	83 df       	rcall	.-250    	; 0x5c <digit_out>
 156:	88 bb       	out	0x18, r24	; 24
	}
	if (n_count == 1)
 158:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	51 f4       	brne	.+20     	; 0x174 <__vector_6+0x5a>
	{
		PORTD &= ~(1 << 1);
 160:	82 b3       	in	r24, 0x12	; 18
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << 0);
 166:	82 b3       	in	r24, 0x12	; 18
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	82 bb       	out	0x12, r24	; 18
		PORTB = digit_out(R1);
 16c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <R1>
 170:	75 df       	rcall	.-278    	; 0x5c <digit_out>
 172:	88 bb       	out	0x18, r24	; 24
	}
	n_count = n_count == 0 ? 1 : 0;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17a:	91 11       	cpse	r25, r1
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	// if (n_count > 1) n_count = 0;
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <main>:

int main(void)
{
	timer_ini();
 1a4:	ac df       	rcall	.-168    	; 0xfe <timer_ini>
    DDRB = 0xFF;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	87 bb       	out	0x17, r24	; 23
	DDRD = (1 << 0)|(1 << 1);
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	81 bb       	out	0x11, r24	; 17
	PORTD = (1 << 3);
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	82 bb       	out	0x12, r24	; 18
	sei();
 1b2:	78 94       	sei
	
    while (1) 
    {
		 for(i = 0; i < 100; i++)
 1b4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i>
 1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <main+0x3e>
		 {
			button();
 1ba:	6d df       	rcall	.-294    	; 0x96 <button>
		    ledout(i);
 1bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i>
 1c0:	8b df       	rcall	.-234    	; 0xd8 <ledout>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f e7       	ldi	r18, 0x7F	; 127
 1c4:	8a e1       	ldi	r24, 0x1A	; 26
 1c6:	96 e0       	ldi	r25, 0x06	; 6
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x24>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x2e>
 1d2:	00 00       	nop
			_delay_ms(250);
			butstate=0;
 1d4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <butstate>
	PORTD = (1 << 3);
	sei();
	
    while (1) 
    {
		 for(i = 0; i < 100; i++)
 1d8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <i>
 1e2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	40 f3       	brcs	.-48     	; 0x1ba <main+0x16>
 1ea:	e4 cf       	rjmp	.-56     	; 0x1b4 <main+0x10>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
