
LAB_7_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ce  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000399  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002a  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	06 d0       	rcall	.+12     	; 0x50 <main>
  44:	2d c0       	rjmp	.+90     	; 0xa0 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <port_ini>:

#include "main.h"

void port_ini(void)
{
	PORTB = 0x00;
  48:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x08;
  4a:	88 e0       	ldi	r24, 0x08	; 8
  4c:	87 bb       	out	0x17, r24	; 23
  4e:	08 95       	ret

00000050 <main>:


int main(void)
{
    unsigned char pwm_state = 0;
	port_ini();
  50:	fb df       	rcall	.-10     	; 0x48 <port_ini>
	init_PWM_timer();
  52:	1e d0       	rcall	.+60     	; 0x90 <init_PWM_timer>
	OCR2 = 0;
  54:	13 bc       	out	0x23, r1	; 35
}


int main(void)
{
    unsigned char pwm_state = 0;
  56:	90 e0       	ldi	r25, 0x00	; 0
	init_PWM_timer();
	OCR2 = 0;
    while (1) 
    {
		
		if (pwm_state == 0)
  58:	91 11       	cpse	r25, r1
  5a:	07 c0       	rjmp	.+14     	; 0x6a <main+0x1a>
		{
			OCR2++;
  5c:	83 b5       	in	r24, 0x23	; 35
  5e:	8f 5f       	subi	r24, 0xFF	; 255
  60:	83 bd       	out	0x23, r24	; 35
			if (OCR2 > 254)
  62:	83 b5       	in	r24, 0x23	; 35
  64:	8f 3f       	cpi	r24, 0xFF	; 255
  66:	69 f4       	brne	.+26     	; 0x82 <main+0x32>
  68:	09 c0       	rjmp	.+18     	; 0x7c <main+0x2c>
				pwm_state = 1;
		}
		
		else if (pwm_state == 1)
  6a:	91 30       	cpi	r25, 0x01	; 1
  6c:	51 f4       	brne	.+20     	; 0x82 <main+0x32>
		{
			OCR2--;
  6e:	83 b5       	in	r24, 0x23	; 35
  70:	81 50       	subi	r24, 0x01	; 1
  72:	83 bd       	out	0x23, r24	; 35
			if (OCR2 < 1)
  74:	83 b5       	in	r24, 0x23	; 35
  76:	88 23       	and	r24, r24
  78:	19 f0       	breq	.+6      	; 0x80 <main+0x30>
  7a:	03 c0       	rjmp	.+6      	; 0x82 <main+0x32>
		
		if (pwm_state == 0)
		{
			OCR2++;
			if (OCR2 > 254)
				pwm_state = 1;
  7c:	91 e0       	ldi	r25, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <main+0x32>
		
		else if (pwm_state == 1)
		{
			OCR2--;
			if (OCR2 < 1)
				pwm_state = 0;
  80:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	ef e5       	ldi	r30, 0x5F	; 95
  84:	fa ee       	ldi	r31, 0xEA	; 234
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x36>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x3c>
  8c:	00 00       	nop
  8e:	e4 cf       	rjmp	.-56     	; 0x58 <main+0x8>

00000090 <init_PWM_timer>:

#include "PWM.h"

void init_PWM_timer(void)
{
	ASSR = 0x00;
  90:	12 bc       	out	0x22, r1	; 34
	TCCR2 = 0b01101110;
  92:	8e e6       	ldi	r24, 0x6E	; 110
  94:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
  96:	14 bc       	out	0x24, r1	; 36
	OCR2 = 0x00;
  98:	13 bc       	out	0x23, r1	; 35
	TIMSK |= 0x00;
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	89 bf       	out	0x39, r24	; 57
  9e:	08 95       	ret

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
